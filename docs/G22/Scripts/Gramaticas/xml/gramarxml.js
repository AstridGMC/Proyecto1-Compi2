/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramarxml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,15],$V2=[1,14],$V3=[1,16],$V4=[5,9,24,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],$V5=[18,24,31],$V6=[1,29],$V7=[1,35],$V8=[1,36],$V9=[1,37],$Va=[1,38],$Vb=[1,39],$Vc=[1,40],$Vd=[1,41],$Ve=[1,42],$Vf=[1,43],$Vg=[1,44],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[9,24,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],$Vr=[9,24,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],$Vs=[1,57],$Vt=[1,58],$Vu=[10,16,18,19,20,21,24,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],$Vv=[24,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],$Vw=[53,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"XML_GRAMAR":4,"EOF":5,"ENCABEZADO":6,"ABRIR_ELEMENTO":7,"ETIQUETA":8,"menosque":9,"c_interroga":10,"xml":11,"version":12,"igual":13,"QUOTES":14,"TIPO_DATO":15,"encoding":16,"FORMAT":17,"masque":18,"UTF":19,"ASCII":20,"ISO":21,"ELEMENTOS":22,"ELEMENTO":23,"identificador":24,"ATRIBUTOS":25,"CIERRE_ELEMENTO":26,"ATRIBUTO":27,"C_ATRIBUTO":28,"TIPOCONTENIDO":29,"CONTENIDO_ETIQUETA":30,"div":31,"TIPO":32,"SIGNOS":33,"SPECIALCHARS":34,"lessthan":35,"graterthan":36,"ampersand":37,"simplequote":38,"doublequote":39,"colon":40,"underscore":41,"corder":42,"corizq":43,"parder":44,"parizq":45,"ptcoma":46,"point":47,"decimal":48,"entero":49,"mas":50,"menos":51,"por":52,"comilla":53,"apostrofe":54,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"menosque",10:"c_interroga",11:"xml",12:"version",13:"igual",16:"encoding",18:"masque",19:"UTF",20:"ASCII",21:"ISO",24:"identificador",31:"div",35:"lessthan",36:"graterthan",37:"ampersand",38:"simplequote",39:"doublequote",40:"colon",41:"underscore",42:"corder",43:"corizq",44:"parder",45:"parizq",46:"ptcoma",47:"point",48:"decimal",49:"entero",50:"mas",51:"menos",52:"por",53:"comilla",54:"apostrofe"},
productions_: [0,[3,2],[4,3],[6,15],[17,1],[17,1],[17,1],[22,2],[22,1],[22,1],[23,2],[7,2],[8,2],[8,1],[25,2],[25,1],[27,5],[28,2],[28,1],[26,6],[26,5],[26,2],[30,2],[30,1],[32,1],[32,1],[29,1],[29,1],[29,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[15,1],[15,1],[15,1],[33,1],[33,1],[33,1],[33,1],[14,1],[14,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 this.$ = new ObjetoNodo($$[$0-1],'', null,$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                          var regla = new Regla("XML_GRAMAR","XML_GRAMAR-> ENCABEZADO ABRIR_ELEMENTO ETIQUETA ","return [ETIQUETA][ENCABEZADO];");
                                          ingresarRegla(regla);
                                          unirErrores();  
break;
case 3:
 this.$ = new ObjetoNodo($$[$0-11],'', null,$$[$0-13],_$[$0-14].first_line, _$[$0-14].first_column);
    	var regla = new Regla("GRAMATICAL","ENCABEZADO-> menosque c_interroga xml version igual QUOTES TIPO_DATO QUOTES encoding igual QUOTES FORMAT QUOTES c_interroga masque","return FORMAT;");
    	ingresarRegla(regla); 
break;
case 4:
this.$ = $$[$0];
			var regla = new Regla("GRAMATICAL","FORMAT-> UTF","return UTF;");ingresarRegla(regla);
break;
case 5:
this.$ = $$[$0];
			var regla = new Regla("GRAMATICAL","FORMAT-> ASCII","return ASCII;");ingresarRegla(regla);
break;
case 6:
this.$ = $$[$0];
			var regla = new Regla("GRAMATICAL","FORMAT-> ISO","return ISO;");ingresarRegla(regla);
break;
case 7:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
	                          var regla = new Regla("GRAMATICAL","ELEMENTOS-> ELEMENTOS  ELEMENTO","return ELEMENTO;");
	                          ingresarRegla(regla); unirErrores();
break;
case 8:
 this.$ = [$$[$0]];
	                          var regla = new Regla("GRAMATICAL","ELEMENTOS-> ELEMENTO","return ELEMENTO;");
                              ingresarRegla(regla); unirErrores();
break;
case 9:
 console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
	        var error =  new Error( this._$.first_line ,  this._$.first_column, 'sintactico','xmldesc', yytext);
     		erroresSintacticos.push(error); unirErrores(); 
break;
case 10:
 this.$ = new ObjetoNodo($$[$0-1],'', null,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
                               var regla = new Regla("GRAMATICAL","ELEMENTO-> ABRIR_ELEMENTO ETIQUETA","return ETIQUETA;");
                               ingresarRegla(regla); 
break;
case 11:
 this.$ = $$[$0];
	                                     var regla = new Regla("GRAMATICAL","ABRIR_ELEMENTO-> menosque identificador","return identificador;");
	                                     ingresarRegla(regla); 
break;
case 12:
 this.$ = new ObjetoNodo('','',$$[$0-1] ,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
	                                var regla = new Regla("GRAMATICAL","ETIQUETA-> ATRIBUTOS  CIERRE_ELEMENTO","return CONTENIDO_ETIQUETA");
                                    ingresarRegla(regla);
break;
case 13:
 this.$ = $$[$0];
	                                var regla = new Regla("GRAMATICAL","ETIQUETA-> CIERRE_ELEMENTO","return CONTENIDO_ETIQUETA");
                                    ingresarRegla(regla);
break;
case 14:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                                    var regla = new Regla("GRAMATICAL","ATRIBUTOS-> ATRIBUTOS ATRIBUTO","return ATRIBUTO;");
                                    ingresarRegla(regla);
break;
case 15:
 this.$ = [$$[$0]];
	                                var regla = new Regla("GRAMATICAL","ATRIBUTOS-> ATRIBUTO","return ATRIBUTO;");
                                    ingresarRegla(regla);
break;
case 16:
 this.$ = new Atributo($$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
                                                            var regla = new Regla("GRAMATICAL","ATRIBUTO-> identificador igual QUOTES C_ATRIBUTO QUOTES","return nuevoAtributo(identificador, C_ATRIBUTO);");
                                                            ingresarRegla(regla);
break;
case 17:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                                            var regla = new Regla("GRAMATICAL","C_ATRIBUTO-> C_ATRIBUTO TIPOCONTENIDO","return TIPO_CONTENIDO;");
                                            ingresarRegla(regla);
break;
case 18:
 this.$ = [$$[$0]];
	                                        var regla = new Regla("GRAMATICAL","C_ATRIBUTO-> TIPOCONTENIDO","return TIPO_CONTENIDO;");
                                            ingresarRegla(regla);
break;
case 19:
 this.$ = new ObjetoNodo($$[$0-1],'', null,$$[$0-4],_$[$0-5].first_line, _$[$0-5].first_column);
																	  var regla = new Regla("GRAMATICAL","CIERRE_ELEMENTO -> masque CONTENIDO_ETIQUETA menosque div identificador masque"," validarEtiqueta(); si(CIERRE_ELEMENTO[0]=texto){\n	 nuevo objetoNodo(etiquetaNombre, texto, ATRIBUTOS)\n}else{		nuevo objetoNodo(etiquetaNombre, ATRIBUTOS, CIERRE_ELEMENTO)\n};\n etquetas.pop();");
																	  ingresarRegla(regla);
break;
case 20:
  this.$ = new ObjetoNodo($$[$0-1],'', null,null,_$[$0-4].first_line, _$[$0-4].first_column);
                                                                        var regla = new Regla("GRAMATICAL","ETIQUETA-> masque CONTENIDO_INTERNO  div identificador masque"," validarEtiqueta(); si(CONTENIDO_INTERNO[0]=texto){\n	 nuevo objetoNodo(etiquetaNombre, texto)\n}else{		nuevo objetoNodo(etiquetaNombre, arreglo atributos)\n};\n etquetas.pop();");
                                                                        ingresarRegla(regla);
    																
break;
case 21:
 this.$ = []; var etiquetaN= etiquetas.pop(); this.$ = new ObjetoNodo(etiquetaN ,'', _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], []);
                                                                      var regla = new Regla("GRAMATICAL","ETIQUETA-> div masque","etiquetaNombre=etquetas.pop(); nuevo objetoNodo(etiquetaNombre, arreglo atributos);\n");ingresarRegla(regla);
break;
case 22:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                                                    var regla = new Regla("GRAMATICAL","CONTENIDO_ETIQUETA-> CONTENIDO_ETIQUETA TIPO","return TIPO;");
                                                    ingresarRegla(regla);
break;
case 23:
 this.$ = [$$[$0]];
	                                                var regla = new Regla("GRAMATICAL","CONTENIDO_ETIQUETA-> TIPO","return TIPO;");
                                                    ingresarRegla(regla);
break;
case 24:
 this.$ = [$$[$0] , 'texto'];
	                    var regla = new Regla("GRAMATICAL","TIPO-> TIPOCONTENIDO","return TIPOCONTENIDO;");
                        ingresarRegla(regla);
break;
case 25:
 this.$ = [$$[$0] , 'objetos'];
	                     var regla = new Regla("GRAMATICAL","TIPO-> ELEMENTO","return ELEMENTO;");
                         ingresarRegla(regla);
break;
case 26:
this.$ = $$[$0];
					var regla = new Regla("GRAMATICAL","TIPOCONTENIDO-> TIPO_DATO","return TIPO_DATO;");ingresarRegla(regla);
break;
case 27:
this.$ = $$[$0];
					var regla = new Regla("GRAMATICAL","TIPOCONTENIDO-> SIGNOS","return SIGNOS;");ingresarRegla(regla);
break;
case 28:
this.$ = $$[$0];
					var regla = new Regla("GRAMATICAL","TIPOCONTENIDO-> SPECIALCHARS","return  SPECIALCHARS;");ingresarRegla(regla);
break;
case 29:
 this.$ = new ObjetoNodo($$[$0],'<',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> lessthan","return  lessthan");ingresarRegla(regla);
break;
case 30:
 this.$ = new ObjetoNodo($$[$0],'>',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> graterthan","return graterthan");ingresarRegla(regla);
break;
case 31:
 this.$ = new ObjetoNodo($$[$0],'&',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> ampersand","return  ampersand");ingresarRegla(regla);
break;
case 32:
 this.$ = new ObjetoNodo($$[$0],'\'',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> simplequote","return  simplequote");ingresarRegla(regla);
break;
case 33:
 this.$ = new ObjetoNodo($$[$0],'"',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> doublequote","return  doublequote");ingresarRegla(regla);
break;
case 34:
 this.$ = new ObjetoNodo($$[$0],':',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> colon","return  colon");ingresarRegla(regla);
break;
case 35:
 this.$ = new ObjetoNodo($$[$0],'_',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> underscore","return underscore");ingresarRegla(regla);
break;
case 36:
 this.$ = new ObjetoNodo($$[$0],'{',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> corder","return  corder");ingresarRegla(regla);
break;
case 37:
 this.$ = new ObjetoNodo($$[$0],'}',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> corizq","return  corizq");ingresarRegla(regla);
break;
case 38:
 this.$ = new ObjetoNodo($$[$0],'(',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> parder","return  parder");ingresarRegla(regla);
break;
case 39:
 this.$ = new ObjetoNodo($$[$0],')',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> parizq","return  parizq");ingresarRegla(regla);
break;
case 40:
 this.$ = new ObjetoNodo($$[$0],';',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> ptcoma","return  ptcoma");ingresarRegla(regla);
break;
case 41:
 this.$ = new ObjetoNodo($$[$0],'.',null,null,_$[$0].first_line, _$[$0].first_column);
	                var regla = new Regla("GRAMATICAL","SPECIALCHARS-> point","return  point");ingresarRegla(regla);
break;
case 42:
 this.$ = new ObjetoNodo($$[$0],$$[$0],null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","TIPO_DATO-> identificador","return  identificador");ingresarRegla(regla);
break;
case 43:
 this.$ = new ObjetoNodo(Number($$[$0]),Number($$[$0]),null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","TIPO_DATO-> decimal","return  decimal");ingresarRegla(regla);
break;
case 44:
 this.$ = new ObjetoNodo(Number($$[$0]),Number($$[$0]),null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","TIPO_DATO->  entero","return  entero");ingresarRegla(regla);
break;
case 45:
 this.$ = new ObjetoNodo($$[$0],$$[$0],null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","SIGNOS-> mas","return  mas;"); ingresarRegla(regla);
break;
case 46:
 this.$ = new ObjetoNodo($$[$0],$$[$0],null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","SIGNOS-> menos","return  menos;"); ingresarRegla(regla);
break;
case 47:
 this.$ = new ObjetoNodo($$[$0],$$[$0],null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","SIGNOS-> por","return  por;"); ingresarRegla(regla);
break;
case 48:
 this.$ = new ObjetoNodo($$[$0],$$[$0],null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","SIGNOS-> div","return  div;");ingresarRegla(regla);
break;
case 49:
 this.$ = new ObjetoNodo($$[$0],$$[$0],null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","QUOTES->comilla","return comilla;"); ingresarRegla(regla);
break;
case 50:
 this.$ = new ObjetoNodo($$[$0].toString(),$$[$0].toString(),null,null,_$[$0].first_line, _$[$0].first_column);
	                    var regla = new Regla("GRAMATICAL","QUOTES-> apostrofe","return apostrofe;"); ingresarRegla(regla);
                        
break;
}
},
table: [{3:1,4:2,6:3,9:[1,4]},{1:[3]},{5:[1,5]},{7:6,9:[1,7]},{10:[1,8]},{1:[2,1]},{8:9,18:$V0,24:$V1,25:10,26:11,27:12,31:$V2},{24:$V3},{11:[1,17]},{5:[2,2]},{18:$V0,24:$V1,26:18,27:19,31:$V2},o($V4,[2,13]),o($V5,[2,15]),{7:28,9:[1,21],15:25,23:24,24:$V6,29:23,30:20,31:$V7,32:22,33:26,34:27,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp},{18:[1,49]},{13:[1,50]},o($V5,[2,11]),{12:[1,51]},o($V4,[2,12]),o($V5,[2,14]),{7:28,9:[1,52],15:25,23:24,24:$V6,29:23,31:$V7,32:53,33:26,34:27,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp},{24:$V3,31:[1,54]},o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,25]),o($Vr,[2,26]),o($Vr,[2,27]),o($Vr,[2,28]),{8:55,18:$V0,24:$V1,25:10,26:11,27:12,31:$V2},o($Vr,[2,42]),o($Vr,[2,43]),o($Vr,[2,44]),o($Vr,[2,45]),o($Vr,[2,46]),o($Vr,[2,47]),o($Vr,[2,48]),o($Vr,[2,29]),o($Vr,[2,30]),o($Vr,[2,31]),o($Vr,[2,32]),o($Vr,[2,33]),o($Vr,[2,34]),o($Vr,[2,35]),o($Vr,[2,36]),o($Vr,[2,37]),o($Vr,[2,38]),o($Vr,[2,39]),o($Vr,[2,40]),o($Vr,[2,41]),o($V4,[2,21]),{14:56,53:$Vs,54:$Vt},{13:[1,59]},{24:$V3,31:[1,60]},o($Vq,[2,22]),{24:[1,61]},o($Vq,[2,10]),{15:25,24:$V6,28:62,29:63,31:$V7,33:26,34:27,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp},o($Vu,[2,49]),o($Vu,[2,50]),{14:64,53:$Vs,54:$Vt},{24:[1,65]},{18:[1,66]},{14:67,15:25,24:$V6,29:68,31:$V7,33:26,34:27,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vs,54:$Vt},o($Vv,[2,18]),{15:69,24:$V6,48:$Vl,49:$Vm},{18:[1,70]},o($V4,[2,20]),o($V5,[2,16]),o($Vv,[2,17]),{14:71,53:$Vs,54:$Vt},o($V4,[2,19]),{16:[1,72]},{13:[1,73]},{14:74,53:$Vs,54:$Vt},{17:75,19:[1,76],20:[1,77],21:[1,78]},{14:79,53:$Vs,54:$Vt},o($Vw,[2,4]),o($Vw,[2,5]),o($Vw,[2,6]),{10:[1,80]},{18:[1,81]},{9:[2,3]}],
defaultActions: {5:[2,1],9:[2,2],81:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var erroresLexicos = [];
	var variables=[];
	var erroresSintacticos = [];
	var errorSemantico = [];
	var erroresGramar = [] ;

    define('grammarXMLAsc',function () {
        return {
            getParser: function () {
                return gramarxml;
            }
        };
    });

    var AUXid=0;
	var etiquetas=[];
	function escribirLista(primitivos) {
		var texto = '';
		primitivos.forEach(function (element) {
			texto = texto + " " + element;
		});
		console.log(texto);
		return texto;
	}

	function validarEtiqueta(nombre, linea, columna){
		if(etiquetas[etiquetas.length - 1] == nombre){
			//console.log(nombre +' == '+ etiquetas[etiquetas.length - 1]);
			//console.log("iguales");
			return true;
		}else{
			//console.log(nombre +' == '+ etiquetas[etiquetas.length - 1]);
			console.log("error semantico"+linea + columna);
			var errorSEM = new Error( linea, columna, 'semantico','xmldesc', nombre);
			errorSemantico.push( errorSEM) ;
			console.log(errorSEM);
			return false;
		}
	}

	function unirErrores(){

            erroresGramar[0]= erroresLexicos ;
            erroresGramar[1]= erroresSintacticos;
            erroresGramar[2]= errorSemantico;

        console.log(erroresGramar.length);
        console.log(erroresGramar[0].length);
        console.log(erroresGramar[1].length);
        console.log(erroresGramar[2].length);
    }

    function ingresarRegla(regla){
        if(regla.length>0){
            var reglas2=[];
            reglas2.push(regla);
            regla= reglas2.concat(regla);
            console.log('agregando regla'+regla.length);
        }else{
            //regla.push(regla);
            console.log('agregando regla'+regla.length);
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState(); console.log('comentario');
break;
case 2:/* skip comment content*/
break;
case 3:/* skip whitespace */
break;
case 4:return 46;
break;
case 5:return 45;
break;
case 6:return 44;
break;
case 7:return 43;
break;
case 8:return 42;
break;
case 9:return 9;
break;
case 10:return 18;
break;
case 11:return 13;
break;
case 12:return 53;
break;
case 13:return 54;
break;
case 14:return 'inicoment';
break;
case 15:return 10;
break;
case 16:return 11;
break;
case 17:return 12;
break;
case 18:return 16;
break;
case 19:return 19
break;
case 20:return 20;
break;
case 21:return 21;
break;
case 22:return 35;
break;
case 23:return 36;
break;
case 24:return 37;
break;
case 25:return 38;
break;
case 26:return 39;
break;
case 27:return 40;
break;
case 28:return 41;
break;
case 29:return 47;
break;
case 30:return 50;
break;
case 31:return 51;
break;
case 32:return 52;
break;
case 33:return 31;
break;
case 34:
break;
case 35:
break;
case 36:return 48;
break;
case 37:return 49;
break;
case 38:return 24;
break;
case 39:return 5;
break;
case 40: console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        var error =  new Error( yy_.yylloc.first_line ,  yy_.yylloc.first_column, 'lexico','xmldesc', yy_.yytext);
                        erroresLexicos.push(error); unirErrores(); 
break;
}
},
rules: [/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:")/i,/^(?:')/i,/^(?:!)/i,/^(?:\?)/i,/^(?:xml\b)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:UTF-8\b)/i,/^(?:ASCII\b)/i,/^(?:ISO859-1\b)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?::)/i,/^(?:_\b)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9])[a-zA-Z0-9_nÃÃ³Ã¡Ã©Ã­ÃºÃÃÃÃÃ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramarxml;
exports.Parser = gramarxml.Parser;
exports.parse = function () { return gramarxml.parse.apply(gramarxml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}