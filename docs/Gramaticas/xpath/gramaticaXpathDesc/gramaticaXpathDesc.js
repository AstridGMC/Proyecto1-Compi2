/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXpathDesc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[2,4],$Va=[1,19],$Vb=[5,8,21,48,52,53,56,57,58,59,60,61,62,63,64,65,67],$Vc=[2,7],$Vd=[5,8,13,14,16,18,21,23,24,25,26,27,48,52,53,56,57,58,59,60,61,62,63,64,65,67],$Ve=[1,25],$Vf=[1,26],$Vg=[1,23],$Vh=[1,24],$Vi=[1,31],$Vj=[1,32],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[1,46],$Vv=[1,51],$Vw=[1,50],$Vx=[2,50],$Vy=[1,65],$Vz=[1,59],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[48,52,53],$VE=[1,77],$VF=[1,75],$VG=[1,76],$VH=[1,78],$VI=[1,79],$VJ=[21,48,52,53,56,57,58,59,60,61,62,63,64,65,67],$VK=[13,14,16,18,19,23,24,25,26,27,31,32,33,34,35,36,37,38,39,40,41,42,66,69,70,71],$VL=[48,52,53,56,57,58,59,60,61,62,63,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"RUTAS":4,"EOF":5,"CONSULTAS":6,"RUTAS_PRIMA":7,"concatenacion":8,"CONSULTA":9,"CONSULTAS_PRIMA":10,"DIAGONALES":11,"TIPO_ID":12,"punto":13,"dosPuntosConsecutivos":14,"FUNCION":15,"diagonalDoble":16,"SIMBOLOS":17,"diagonal":18,"arroba":19,"SIGUIENTE_ARROBA":20,"asterisco":21,"METODOS":22,"identificador":23,"funcionNode":24,"funcionText":25,"funcionLast":26,"funcionPosition":27,"PALABRA_RESERVADA":28,"dosPuntos":29,"SIGUIENTE_METODO":30,"ancestor1":31,"ancestor_or_self1":32,"attribute1":33,"child1":34,"descendant1":35,"descendant_or_self1":36,"following1":37,"following_sibling1":38,"parent1":39,"preceding1":40,"preceding_sibling1":41,"self1":42,"ARREGLOS_ID":43,"ARREGLO_ID":44,"ARREGLOS_ID_PRIMA":45,"corcheteAbierto":46,"OPERACIONES_ARREGLO":47,"corcheteCerrado":48,"OPERACION_LOGICA":49,"OPERACION_RELACIONAL":50,"SIMBOLOS_LOGICOS":51,"and1":52,"or1":53,"OPERACION_ARITMETICA":54,"SIMBOLOS_RELACIONALES":55,"mayorque":56,"menorque":57,"mayorIgual":58,"menorIgual":59,"igual":60,"diferenteQue":61,"+":62,"-":63,"dividir":64,"modulo":65,"parizq":66,"parder":67,"TIPOIGUALAR":68,"entero":69,"decimal":70,"cadena":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"concatenacion",13:"punto",14:"dosPuntosConsecutivos",16:"diagonalDoble",18:"diagonal",19:"arroba",21:"asterisco",23:"identificador",24:"funcionNode",25:"funcionText",26:"funcionLast",27:"funcionPosition",29:"dosPuntos",31:"ancestor1",32:"ancestor_or_self1",33:"attribute1",34:"child1",35:"descendant1",36:"descendant_or_self1",37:"following1",38:"following_sibling1",39:"parent1",40:"preceding1",41:"preceding_sibling1",42:"self1",46:"corcheteAbierto",48:"corcheteCerrado",52:"and1",53:"or1",56:"mayorque",57:"menorque",58:"mayorIgual",59:"menorIgual",60:"igual",61:"diferenteQue",62:"+",63:"-",64:"dividir",65:"modulo",66:"parizq",67:"parder",69:"entero",70:"decimal",71:"cadena"},
productions_: [0,[3,2],[4,2],[7,3],[7,0],[6,2],[10,2],[10,0],[9,1],[9,1],[9,1],[9,1],[9,1],[11,2],[11,2],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[20,1],[20,1],[15,1],[15,1],[15,1],[15,1],[22,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,1],[30,1],[30,1],[30,1],[30,1],[12,1],[12,2],[43,2],[45,2],[45,0],[44,3],[47,1],[47,1],[49,3],[51,1],[51,1],[50,3],[50,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,1],[68,1],[68,1],[68,1],[68,1],[68,2],[68,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:

		this.$=[$$[$0-1]]; this.$= this.$.concat($$[$0]);
/*		console.log('Rutas -> consultas rutas-prima');
		console.log('consultas',$$[$0-1]);
		console.log('rutasprima',$$[$0]);
*/
	
break;
case 3:

		this.$=[$$[$0-1]]; this.$ = this.$.concat($$[$0]);
/*		console.log('Rutas-prima -> concatenacion consultas rutas-prima');
		console.log('consultas ',$$[$0-1]);
		console.log('rutas-prima',$$[$0]);	
*/	
break;
case 4:

		this.$=[];
//		console.log('lambda');
	
break;
case 5: case 48:
this.$=[$$[$0-1]]; this.$= this.$.concat($$[$0]);
break;
case 6: case 49:
this.$=[$$[$0-1]]; this.$ = this.$.concat($$[$0]);
break;
case 7: case 50:
this.$=[];
break;
case 8: case 9: case 12: case 19: case 20: case 21: case 41: case 42:
this.$=$$[$0];
break;
case 10: case 17: case 44:
this.$ = new SimbolosXpath(TiposXpath.PUNTO,_$[$0].first_line, _$[$0].first_column);
break;
case 11: case 18: case 45:
this.$ = new SimbolosXpath(TiposXpath.DOSPUNTOSCONSECUTIVOS,_$[$0].first_line, _$[$0].first_column);
break;
case 13:
 this.$ = new diagonalDobleC($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 14:
 this.$ = new diagonalSimpleS($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 15: case 76:
 this.$ = new Arroba($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 16: case 23: case 43:
this.$ = new SimbolosXpath(TiposXpath.ASTERISCO,_$[$0].first_line, _$[$0].first_column);
break;
case 22: case 74:
 this.$ = new Dato($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 24:
this.$ = new Funcion(TiposXpath.FUNCION_NODE,_$[$0].first_line, _$[$0].first_column);
break;
case 25:
this.$ = new Funcion(TiposXpath.FUNCION_TEXT,_$[$0].first_line, _$[$0].first_column);
break;
case 26:
this.$ = new Funcion(TiposXpath.FUNCION_LAST,_$[$0].first_line, _$[$0].first_column);
break;
case 27:
this.$ = new Funcion(TiposXpath.FUNCION_POSITION,_$[$0].first_line, _$[$0].first_column);
break;
case 28:
this.$ = new Metodo($$[$0-3],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 29:
this.$=TiposXpath.METODO_ANCESTOR;
break;
case 30:
this.$=TiposXpath.METODO_ANCESTOR_OR_SELF;
break;
case 31:
this.$=TiposXpath.METODO_ATRIBUTE;
break;
case 32:
this.$=TiposXpath.METODO_CHILD;
break;
case 33:
this.$=TiposXpath.METODO_DESCENDANT;
break;
case 34:
this.$=TiposXpath.METODO_METODO_DESCENDANT_OR_SELF;
break;
case 35:
this.$=TiposXpath.METODO_FOLLOWING;
break;
case 36:
this.$=TiposXpath.METODO_FOLLOWING_SIGLING;
break;
case 37:
this.$=TiposXpath.METODO_PARENT;
break;
case 38:
this.$=TiposXpath.METODO_PRECEDING;
break;
case 39:
this.$=TiposXpath.METODO_PRECEDING_SIBLING;
break;
case 40:
this.$=TiposXpath.METODO_SELF;
break;
case 46:
this.$ = new IdSimple($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 47:
this.$ = new IdCompuesto($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 51:
this.$ = new Predicado($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 52: case 53: case 58:
this.$ = $$[$0];
break;
case 54:
this.$ = new OperacionLogica($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 55:
this.$ = Operador.AND;
break;
case 56:
this.$ = Operador.OR;
break;
case 57:
this.$ = new OperacionRelacional($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 59:
this.$ = Operador.MAYOR_QUE;
break;
case 60:
this.$ = Operador.MENOR_QUE;
break;
case 61:
this.$ = Operador.MAYOR_IGUAL;
break;
case 62:
this.$ = Operador.MENOR_IGUAL;
break;
case 63:
this.$ = Operador.IGUAL;
break;
case 64:
this.$ = Operador.DIFERENTE_QUE;
break;
case 65:
this.$ = new OperacionAritmetica($$[$0-2],$$[$0],Operador.SUMA,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$ = new OperacionAritmetica($$[$0-2],$$[$0],Operador.RESTA,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$ = new OperacionAritmetica($$[$0-2],$$[$0],Operador.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = new OperacionAritmetica($$[$0-2],$$[$0],Operador.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$ = new OperacionAritmetica($$[$0-2],$$[$0],Operador.MODULO,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$ = $$[$0-1]; 
break;
case 71:
this.$ = $$[$0]; 
break;
case 72: case 73:
 this.$ = new Dato(Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 75: case 77:
 this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,6:3,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8},{1:[3]},{5:[1,17]},{5:$V9,7:18,8:$Va},o($Vb,$Vc,{11:5,12:6,15:9,10:20,9:21,13:$V0,14:$V1,16:$V2,18:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8}),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),{12:29,13:$Ve,14:$Vf,15:27,17:22,19:$Vg,21:$Vh,22:28,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt},{12:29,13:$Ve,14:$Vf,15:27,17:43,19:$Vg,21:$Vh,22:28,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt},o($Vd,[2,46],{43:44,44:45,46:$Vu}),o($Vd,[2,24]),o($Vd,[2,25]),o($Vd,[2,26]),o($Vd,[2,27]),{1:[2,1]},{5:[2,2]},{6:47,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8},o($Vb,[2,5]),o($Vb,$Vc,{11:5,12:6,15:9,9:21,10:48,13:$V0,14:$V1,16:$V2,18:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8}),o($Vd,[2,13]),{20:49,21:$Vv,23:$Vw},o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),o($Vd,[2,20]),o($Vd,[2,21]),{29:[1,52]},{29:[2,29]},{29:[2,30]},{29:[2,31]},{29:[2,32]},{29:[2,33]},{29:[2,34]},{29:[2,35]},{29:[2,36]},{29:[2,37]},{29:[2,38]},{29:[2,39]},{29:[2,40]},o($Vd,[2,14]),o($Vd,[2,47]),o($Vd,$Vx,{45:53,44:54,46:$Vu}),{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,47:55,49:56,50:57,54:58,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},{5:$V9,7:67,8:$Va},o($Vb,[2,6]),o($Vd,[2,15]),o($Vd,[2,22]),o($Vd,[2,23]),{29:[1,68]},o($Vd,[2,48]),o($Vd,$Vx,{44:54,45:69,46:$Vu}),{48:[1,70]},{48:[2,52]},{48:[2,53],51:71,52:[1,72],53:[1,73]},o($VD,[2,58],{55:74,21:$VE,56:[1,80],57:[1,81],58:[1,82],59:[1,83],60:[1,84],61:[1,85],62:$VF,63:$VG,64:$VH,65:$VI}),{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,54:86,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},o($VJ,[2,71]),o($VJ,[2,72]),o($VJ,[2,73]),o($VJ,[2,74]),o($VJ,[2,75]),{20:87,21:$Vv,23:$Vw},o($VJ,[2,77]),{5:[2,3]},{12:90,13:[1,92],14:[1,93],15:89,21:[1,91],23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,30:88},o($Vd,[2,49]),o([5,8,13,14,16,18,21,23,24,25,26,27,46,48,52,53,56,57,58,59,60,61,62,63,64,65,67],[2,51]),{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:94,54:58,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},o($VK,[2,55]),o($VK,[2,56]),{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,54:95,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,54:96,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,54:97,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,54:98,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,54:99,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},{6:64,9:4,11:5,12:6,13:$V0,14:$V1,15:9,16:$V2,18:$V3,19:$Vy,22:66,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:30,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,54:100,66:$Vz,68:60,69:$VA,70:$VB,71:$VC},o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),{21:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:[1,101]},o($VJ,[2,76]),o($Vd,[2,28]),o($Vd,[2,41]),o($Vd,[2,42]),o($Vd,[2,43]),o($Vd,[2,44]),o($Vd,[2,45]),{48:[2,54]},o($VD,[2,57],{21:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($VL,[2,65],{21:$VE,64:$VH,65:$VI}),o($VL,[2,66],{21:$VE,64:$VH,65:$VI}),o($VJ,[2,67]),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,70])],
defaultActions: {17:[2,1],18:[2,2],31:[2,29],32:[2,30],33:[2,31],34:[2,32],35:[2,33],36:[2,34],37:[2,35],38:[2,36],39:[2,37],40:[2,38],41:[2,39],42:[2,40],56:[2,52],67:[2,3],94:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const {Dato} = require("../../../Scripts/ClasesXpath/Dato");
	const {OperacionAritmetica} = require("../../../Scripts/ClasesXpath/OperacionAritmetica");
	const {Operador} = require("../../../Scripts/ClasesXpath/Operador");
	const {OperacionRelacional} = require("../../../Scripts/ClasesXpath/OperacionRelacional");
	const {OperacionLogica} = require("../../../Scripts/ClasesXpath/OperacionLogica");
	const {Predicado} = require("../../../Scripts/ClasesXpath/Predicado");
	const {IdSimple} = require("../../../Scripts/ClasesXpath/IdSimple");
	const {IdCompuesto} = require("../../../Scripts/ClasesXpath/IdCompuesto");
	const {SimbolosXpath} = require("../../../Scripts/ClasesXpath/SimbolosXpath");
	const {TiposXpath} = require("../../../Scripts/ClasesXpath/TiposXpath");
	const {Metodo} = require("../../../Scripts/ClasesXpath/Metodo");
	const {Funcion} = require("../../../Scripts/ClasesXpath/Funcion");
	const {Arroba} = require("../../../Scripts/ClasesXpath/Arroba");
	const {diagonalDobleC} = require("../../../Scripts/ClasesXpath/diagonalDobleC");
	const {diagonalSimpleS} = require("../../../Scripts/ClasesXpath/diagonalSimpleS");

	var aux =0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'xml1'; 
break;
case 1:return 'utf';
break;
case 2:return 'ascii1';
break;
case 3:return 'version';
break;
case 4:return 'encoding';
break;
case 5:return 65;
break;
case 6:return 53;
break;
case 7:return 52;
break;
case 8:return 24;
break;
case 9:return 25;
break;
case 10:return 26;
break;
case 11:return 27;
break;
case 12:return 32;
break;
case 13:return 31;
break;
case 14:return 33;
break;
case 15:return 34;
break;
case 16:return 36;	
break;
case 17:return 35;
break;
case 18:return 38;
break;
case 19:return 37;
break;
case 20:return 39;
break;
case 21:return 41;
break;
case 22:return 40;
break;
case 23:return 42;
break;
case 24:return 'ptcoma';
break;
case 25:return 29;
break;
case 26:return 66;
break;
case 27:return 67;
break;
case 28:return 46;
break;
case 29:return 48;
break;
case 30:return 59;
break;
case 31:return 58;
break;
case 32:return 57;
break;
case 33:return 56;
break;
case 34:return 60;
break;
case 35:return 61;
break;
case 36:return 14;
break;
case 37:return 13;
break;
case 38:return 21
break;
case 39:return 63
break;
case 40:return 62
break;
case 41:return 16;
break;
case 42:return 18;
break;
case 43:return 64;
break;
case 44:return 'interrogacionC';
break;
case 45:return 19;
break;
case 46:return 8;
break;
case 47:
break;
case 48:
break;
case 49:return 70;
break;
case 50:return 69;
break;
case 51:return 23;
break;
case 52:return 71;
break;
case 53:return 'comilla';
break;
case 54:return 5;
break;
case 55: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:XML\b)/i,/^(?:UTF8\b)/i,/^(?:ASCII\b)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:mod\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor_or_self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant_or_self\b)/i,/^(?:descendant\b)/i,/^(?:following_sibling\b)/i,/^(?:following\b)/i,/^(?:parent\b)/i,/^(?:preceding_sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:\*)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:div\b)/i,/^(?:\?)/i,/^(?:@)/i,/^(?:\|)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXpathDesc;
exports.Parser = gramaticaXpathDesc.Parser;
exports.parse = function () { return gramaticaXpathDesc.parse.apply(gramaticaXpathDesc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}